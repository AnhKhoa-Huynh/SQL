# Manipulation

<aside>
ðŸ’¡ **CHEATSHEET:** [Learn SQL: Manipulation Cheatsheet | Codecademy](https://www.codecademy.com/learn/learn-sql/modules/learn-sql-manipulation/cheatsheet)

</aside>

<aside>
ðŸ’¡ **CONCEPT DEFINITIONS:** [What is a Relational Database Management System? | Codecademy](https://www.codecademy.com/article/what-is-rdbms-sql)

</aside>

- **Data types:**
    - Numeric types
    - String or character types
    - Temporal types for dates and times
    

- **SQL supports a range of data types:**
    - `integer`: A whole number between -2147483648 and 2147483647. Postgres also includes alternativesÂ `smallint`Â andÂ `bigint`.
    - `real`: A floating-point type that has variable-precision with a maximum range of 6 decimals.
    - `text`: A range of characters of unlimited length.
    - `char`: A range of characters of fixed lengthÂ `n`, an error will be raised for any entries that exceed lengthÂ `n`. Entries that are shorter thanÂ `n`Â will be space-padded.
    - `varchar`: A range of characters of variable length with a maximum lengthÂ `n`. However, unlikeÂ `char`Â there is no space-padding to extend entries shorter thanÂ `n`.
    - `date`: A date (without any time value), such as 2022-06-21 (ISO 8601 format) and 6/21/2022.

---

# *Create* CREATE TABLE

```sql
-- CREATE statements allow us to create a new table in the database.
CREATE TABLE celebs (
   id INTEGER, 
   name TEXT, 
   age INTEGER
);
```

- `[CREATE TABLE](https://www.codecademy.com/resources/docs/sql/commands/create-table?page_ref=catalog)`Â is a clause that tells SQL you want to create a new table.
- `celebs`Â is the name of the table.
- `(id INTEGER, name TEXT, age INTEGER)`Â is a list of parameters defining each column, or attribute in the table and itsÂ [data type](https://www.codecademy.com/resources/docs/sql/data-types?page_ref=catalog):
    - `id`Â is the first column in the table. It stores values of data typeÂ `INTEGER`
    - `name`Â is the second column in the table. It stores values of data typeÂ `TEXT`
    - `age`Â is the third column in the table. It stores values of data typeÂ `INTEGER`

---

# *Insert* INSERT INTO

- The INSERT statement inserts a new row / records into a table.

```sql

INSERT INTO celebs (id, name, age) 
VALUES (1, 'Justin Bieber', 22);
```

- `[INSERT INTO](https://www.codecademy.com/resources/docs/sql/commands/insert-into?page_ref=catalog)`Â is a clause that adds the specified row or rows.
- `celebs`Â is the table the row is added to.
- `(id, name, age)`Â is a parameter identifying the columns that data will be inserted into.
- `VALUES`Â is a clause that indicates the data being inserted.
- `(1, 'Justin Bieber', 22)`Â is a parameter identifying the values being inserted.
    - `1`: an integer that will be added toÂ `id`Â column.
    - `'Justin Bieber'`: text that will be added toÂ `name`Â column.
    - `22`: an integer that will be added toÂ `age`Â column.

![Untitled](https://s3-us-west-2.amazonaws.com/secure.notion-static.com/17a70310-3756-462a-b2c8-78eda929f6f6/Untitled.png)

```sql
INSERT INTO celebs (id, name, age)
VALUES (1, 'Justin Bieber', 22),
       (2, 'Beyonce Knowles', 33),
       (3, 'Jeremy Lin', 26),
       (4, 'Taylor Swift', 26);

SELECT * FROM celebs;
```

---

# *Select* SELECT â€¦ FROM

- `SELECT` statements are used to fetch data from a database.
- `SELECT`Â statements always return a new table called theÂ *result set*.

```sql
-- 
SELECT name FROM celebs;
```

- `[SELECT](https://www.codecademy.com/resources/docs/sql/commands/select?page_ref=catalog)` is a clause that indicates that the statement is a query.
- name specifies the column to query data from.
- FROM celebs specifies the name of the table to query data from. In this statement, data is queried from the celebs table.

```sql
-- Query data from all columns in a table with SELECT
SELECT * FROM celebs;
```

`*`Â is a special wildcard character that we have been using. It allows you to select every column in a table without having to name each one individually. Here, the result set contains every column in theÂ `celebs`Â table.

---

# *Alter* AFTER â€¦ / ADD COLUMN

- TheÂ `ALTER TABLE`Â statement adds a new column to a table.

```sql
ALTER TABLE celebs 
ADD COLUMN twitter_handle TEXT;
```

- `[ALTER TABLE](https://www.codecademy.com/resources/docs/sql/commands/alter-table?page_ref=catalog)`Â is a clause that lets you make the specified changes.
- `celebs`Â is the name of the table that is being changed.
- `ADD COLUMN`Â is a clause that lets you add a new column to a table:
    - `twitter_handle`Â is the name of the new column being added
    - `TEXT`Â is the data type for the new column
- `NULL`Â is a special value in SQL that represents missing or unknown data. Here, the rows that existed before the column was added haveÂ `NULL`Â (âˆ…) values forÂ `twitter_handle`.

![Untitled](https://s3-us-west-2.amazonaws.com/secure.notion-static.com/8672f512-a7fe-4b5a-8c5d-be5ad06cd4f7/Untitled.png)

```sql
ALTER TABLE employees
ADD COLUMN salary numeric,
ADD COLUMN hired_date date;
```

---

# *Update* UPDATE / SET / WHERE

- TheÂ `UPDATE`Â statement edits a row in a table. You can use theÂ `UPDATE`Â statement when you want to change existing records.

```sql
-- The statement updates the record with an id value of 4 to have the twitter_handle @taylorswift13
UPDATE celebs 
SET twitter_handle = '@taylorswift13' 
WHERE id = 4;
```

- `[UPDATE](https://www.codecademy.com/resources/docs/sql/commands/update?page_ref=catalog)`Â is a clause that edits a row in the table.
- `celebs`Â is the name of the table.
- `SET`Â is a clause that indicates the column to edit.
    - `twitter_handle`Â is the name of the column that is going to be **updated**.
    - `@taylorswift13`Â is the new value that is going to be inserted into theÂ `twitter_handle`Â column.
- `WHERE`Â is a clause that indicates which row(s) to update with the new column value. Here the row with aÂ `4`Â in theÂ `id`Â column is the row that will have theÂ `twitter_handle`Â updated toÂ `@taylorswift13`.

![Untitled](https://s3-us-west-2.amazonaws.com/secure.notion-static.com/5e4d0e21-67c8-4d5e-b9ff-714c8db601d6/Untitled.png)

---

# *Delete* DELETE FROM / WHERE

- TheÂ `DELETE FROM`Â statement deletes one or more rows from a table. You can use the statement when you want to delete existing records.

```sql
-- The statement deletes all records in the celebs table with no twitter_handle
DELETE FROM celebs 
WHERE twitter_handle IS NULL
```

- `[DELETE FROM](https://www.codecademy.com/resources/docs/sql/commands/delete?page_ref=catalog)`Â is a clause that lets you delete rows from a table.
- `celebs`Â is the name of the table we want to delete rows from.
- `WHERE`Â is a clause that lets you select which rows you want to delete. Here we want to delete all of the rows where the twitter_handle columnÂ `IS NULL`.
- `IS NULL`Â is a condition in SQL that returns true when the value isÂ `NULL`Â and false otherwise.

![Untitled](https://s3-us-west-2.amazonaws.com/secure.notion-static.com/82346500-504f-49eb-9df9-8cc12fa99ab2/Untitled.png)

```sql
DELETE FROM friends
WHERE id = 1;
```

```sql
-- The entire students table will be deleted due to there being no WHERE clause:
DELETE FROM students;
```

---

# *Constraints*

<aside>
ðŸ’¡ **CONSTRAINTS:** [SQL | Constraints | Codecademy](https://www.codecademy.com/resources/docs/sql/constraints?page_ref=catalog)

</aside>

- *[Constraints](https://www.codecademy.com/resources/docs/sql/constraints?page_ref=catalog)*Â that add information about how a column can be used are invoked after specifying the data type for a column.
- They can be used to tell the database to reject inserted data that does not adhere to a certain restriction.

```sql
-- The statement sets constraints on the celebs table
CREATE TABLE celebs (
   id INTEGER PRIMARY KEY, 
   name TEXT UNIQUE,
   date_of_birth TEXT NOT NULL,
   date_of_death TEXT DEFAULT 'Not Applicable'
);
```

- `PRIMARY KEY`Â columns can be used to uniquely identify the row. Attempts to insert a row with an identical value to a row already in the table will result in aÂ *constraint violation*Â which will not allow you to insert the new row.
- `UNIQUE`Â columns have a different value for every row. This is similar toÂ `PRIMARY KEY`Â except a table can have many differentÂ `UNIQUE`Â columns.
- `NOT NULL`Â columns must have a value. Attempts to insert a row without a value for aÂ `NOT NULL`Â column will result in a constraint violation and the new row will not be inserted.
- `DEFAULT`Â columns take an additional argument that will be the assumed value for an inserted row if the new row does not specify a value for that column.
