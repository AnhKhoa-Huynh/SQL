# Aggregate Function

<aside>
ðŸ’¡ **CHEATSHEET:** [Learn SQL: Aggregate Functions Cheatsheet | Codecademy](https://www.codecademy.com/learn/learn-sql/modules/learn-sql-aggregate-functions/cheatsheet)

</aside>

# *Count*

- The fastest way to calculate how many rows are in a table is to use theÂ `COUNT()`Â function.
- `[COUNT()](https://www.codecademy.com/resources/docs/sql/aggregate-functions/count?page_ref=catalog)`Â is a function that takes the name of a column as an argument and counts the number of non-empty values in that column.

```sql
-- Count how many apps are in the table
SELECT COUNT(*)
FROM table_name;
```

![Untitled](https://s3-us-west-2.amazonaws.com/secure.notion-static.com/e50ce6f8-190a-4489-aad2-d714d960eadd/Untitled.png)

```sql
-- Count how many free apps are in the table 
SELECT COUNT(*) FROM fake_apps
WHERE price = 0;
```

![Untitled](https://s3-us-west-2.amazonaws.com/secure.notion-static.com/87bed0dd-1cea-45f5-b684-0aac51527cd5/Untitled.png)

---

# *Sum*

- `[SUM()](https://www.codecademy.com/resources/docs/sql/aggregate-functions/sum?page_ref=catalog)`Â is a function that takes the name of a column as an argument and returns the sum of all the values in that column.

```sql
-- Sum the total number of downloads for all the apps combined
SELECT SUM(downloads)
FROM fake_apps;
```

![Untitled](https://s3-us-west-2.amazonaws.com/secure.notion-static.com/773b464e-4e6d-44b0-b4dc-52ea21c8a165/Untitled.png)

---

# *Max / Min*

- TheÂ `MAX()`Â andÂ `MIN()`Â functions return the highest and lowest values in a column, respectively.

```sql
-- How many dÆ¡
SELECT MAX(price) FROM fake_apps;
```

![Untitled](https://s3-us-west-2.amazonaws.com/secure.notion-static.com/6f2f4352-7784-44b4-9157-1691c5cef7c7/Untitled.png)

---

# *Avarage*

- SQL uses theÂ `[AVG()](https://www.codecademy.com/resources/docs/sql/aggregate-functions/avg?page_ref=catalog)`Â function to quickly calculate the average value of a particular column.

```sql
-- Calculate the average number of downloads for all the apps in the table
SELECT AVG(downloads)
FROM fake_apps;
```

---

# *Round*

- `[ROUND()](https://www.codecademy.com/resources/docs/sql/commands/round?page_ref=catalog)`Â function takes two arguments inside the parenthesis:
    - a column name.
    - an integer.
- It rounds the values in the column to the number of decimal places specified by the integer.

```sql
-- We pass the column price and integer 0 as arguments. SQL rounds the values in the column to 0 decimal places in the output
SELECT ROUND(price, 0)
FROM fake_apps;
```

```sql
-- Rounding the average price of an app ($2.02365) to 2 decimal places
SELECT ROUND(AVG(price), 2) FROM fake_apps;
```

---

# *Group by I*

- `GROUP BY`Â is a clause in SQL that is used with aggregate functions. It is used in collaboration with theÂ `SELECT`Â statement to arrange identical data intoÂ *groups*.
- TheÂ `GROUP BY`Â statement comes after anyÂ `[WHERE](https://www.codecademy.com/resources/docs/sql/commands/where?page_ref=catalog)`Â statements, but beforeÂ `[ORDER BY](https://www.codecademy.com/resources/docs/sql/commands/order-by?page_ref=catalog)`Â orÂ `[LIMIT](https://www.codecademy.com/resources/docs/sql/commands/limit?page_ref=catalog)`.

```sql
-- From this long block of code
SELECT AVG(imdb_rating)
FROM movies
WHERE year = 1999;
 
SELECT AVG(imdb_rating)
FROM movies
WHERE year = 2000;
 
SELECT AVG(imdb_rating)
FROM movies
WHERE year = 2001;
```

```sql
-- To this shortened version
SELECT year,
   AVG(imdb_rating)
FROM movies
GROUP BY year
ORDER BY year;
```

---

# *Group by II*

- SQL lets us use column reference(s) in ourÂ `GROUP BY`Â that will make our lives easier.
    - `1`Â is the first column selected.
    - `2`Â is the second column selected.
    - `3`Â is the third column selected.
    - and so on.

```sql
-- From this 
SELECT ROUND(imdb_rating),
   COUNT(name)
FROM movies
GROUP BY ROUND(imdb_rating)
ORDER BY ROUND(imdb_rating);
```

```sql
-- To this
SELECT ROUND(imdb_rating),
   COUNT(name)
FROM movies
GROUP BY 1
ORDER BY 1;
```

```sql
SELECT category, 
   price,
   AVG(downloads)
FROM fake_apps
GROUP BY category, price;
```

```sql
SELECT category, price, AVG(downloads) 
FROM fake_apps
GROUP BY 1, 2;
```

---

# *Having*

- In addition to being able to group data usingÂ `[GROUP BY](https://www.codecademy.com/resources/docs/sql/commands/group-by?page_ref=catalog)`, SQL also allows you to filter which groups to include and which to exclude.
- For instance, imagine that we want to see how many movies of different genres were produced each year, but we only care about years and genres with at least 10 movies.
- We canâ€™t useÂ `[WHERE](https://www.codecademy.com/resources/docs/sql/commands/where?page_ref=catalog)`Â here because we donâ€™t want to filter the rows; we want toÂ *filter groups*.
- This is whereÂ `[HAVING](https://www.codecademy.com/resources/docs/sql/commands/having?page_ref=catalog)`Â comes in.
- `HAVING`Â is very similar toÂ `WHERE`. In fact, all types ofÂ `WHERE`Â clauses you learned about thus far can be used withÂ `HAVING`.
- When we want to limit the results of a query based on values of the individual rows, useÂ `WHERE`.
    - Suppose you have a table called "Students" with columns like "Name," "Age," and "Grade." If you want to retrieve only the rows of students who are 18 years old, you can use the WHERE clause like this:
    
    ```sql
    SELECT * FROM Students 
    WHERE Age = 18;
    ```
    
- When we want to limit the results of a query based on an aggregate property, useÂ `HAVING`.
    - Suppose you want to find the average grade for each age group and retrieve only the age groups with an average grade above 80. You can use the HAVING clause like this:
    
    ```sql
    SELECT Age, AVG(Grade) as AvgGrade 
    FROM Students 
    GROUP BY Age 
    HAVING AVG(Grade) > 80;
    ```
    

- Other examples:
