# Multiple Tables

<aside>
💡 **CHEATSHEET:** [Learn SQL: Multiple Tables Cheatsheet | Codecademy](https://www.codecademy.com/learn/learn-sql/modules/learn-sql-multiple-tables/cheatsheet)

</aside>

# *Combining Tables with SQL*

```sql
-- Combining newspaper table and online table
SELECT *
FROM orders
JOIN customers
  ON orders.customer_id = customers.customer_id;
```

- Let’s break the code down:
    - The first line selects all columns from our combined table. If we only want to select certain columns, we can specify which ones we want.
    - The second line specifies the first table that we want to look in, `orders`
    - The third line uses `JOIN` to say that we want to combine information from `orders` with `customers`.
    - The fourth line tells us how to combine the two tables. We want to match `orders` table’s `customer_id` column with `customers` table’s `customer_id` column.

![Untitled](https://s3-us-west-2.amazonaws.com/secure.notion-static.com/7290e229-8d1c-4c8f-bdde-a1b612aaaabd/Untitled.png)

- Instead of selecting *all* the columns using `*`, if we only wanted to select `orders` table’s `order_id` column and `customers` table’s `customer_name` column, we could use the following query:

```sql
SELECT orders.order_id,
   customers.customer_name
FROM orders
JOIN customers
  ON orders.customer_id = customers.customer_id;
```

![Untitled](https://s3-us-west-2.amazonaws.com/secure.notion-static.com/7eb00468-c900-4c39-a51b-f26ad078320a/Untitled.png)

---

# *Inner Joins*

- When we perform a simple `[JOIN](https://www.codecademy.com/resources/docs/sql/commands/inner-join)` (often called an *inner join*) our result only includes rows that match our `ON` condition.

![Untitled](https://s3-us-west-2.amazonaws.com/secure.notion-static.com/f0bd0218-ae52-40d0-9f18-a20de6b6f722/Untitled.png)

![Untitled](https://s3-us-west-2.amazonaws.com/secure.notion-static.com/eb3664d9-3dcb-4485-8210-7e3ea927cd94/Untitled.png)

```sql
SELECT COUNT(*) FROM newspaper;
SELECT COUNT(*) FROM online;
SELECT COUNT(*) FROM newspaper
JOIN online
  ON newspaper.id = online.id;
```

![Untitled](https://s3-us-west-2.amazonaws.com/secure.notion-static.com/4e8ca115-fb9e-4ff4-81c1-15cb932313be/Untitled.png)

---

# *Left Joins*

- What if we want to combine two tables and keep some of the un-matched rows?
- SQL lets us do this through a command called `[LEFT JOIN](https://www.codecademy.com/resources/docs/sql/commands/left-join?page_ref=catalog)`.
- A *left join* will keep all rows from the first table, regardless of whether there is a matching row in the second table.

![Untitled](https://s3-us-west-2.amazonaws.com/secure.notion-static.com/714be72a-341f-4e1c-9fab-3e86f258f65d/Untitled.png)

![Untitled](https://s3-us-west-2.amazonaws.com/secure.notion-static.com/b4c394c3-ce34-4981-9000-b5b6ff122b05/Untitled.png)

- The first and last rows have matching values of `c2`. The middle rows do not match. The final result will keep all rows of the first table but will omit the un-matched row from the second table.

```sql
SELECT *
FROM table1
LEFT JOIN table2
  ON table1.c2 = table2.c2;
/*
- The first line selects all columns from both tables.
- The second line selects table1 (the “left” table).
- The third line performs a LEFT JOIN on table2 (the “right” table).
- The fourth line tells SQL how to perform the join (by looking for matching values in column c2). */
```

```sql
-- Suppose we want to know how many users subscribe to the print newspaper, but not to the online
SELECT *
FROM newspaper
LEFT JOIN online
  ON newspaper.id = online.id;
-- To find which users do not subscribe to the online edition, WHERE will select rows where there was no corresponding row from the online table.
SELECT *
FROM newspaper
LEFT JOIN online
  ON newspaper.id = online.id
  WHERE online.id IS NULL;
```

---

# *Primary Key vs Foreign Key*

- Each of these tables has a column that uniquely identifies each row of that table. These are called primary keys:
    - `order_id` for `orders`
    - `subscription_id` for `subscriptions`
    - `customer_id` for `customers`
- Primary keys have a few requirements:
    - None of the values can be `NULL`.
    - Each value must be unique (i.e., you can’t have two customers with the same `customer_id` in the `customers` table).
    - A table cannot have more than one primary key column.
- When the primary key for one table appears in a different table, it is called a foreign key.

![Untitled](https://s3-us-west-2.amazonaws.com/secure.notion-static.com/1e11bafd-5245-4e93-9898-2c6e41d5cc3a/Untitled.png)

- `customer_id` (the primary key for `customers`) and `subscription_id` (the primary key for `subscriptions`) both appear in this.
- So `customer_id` is a primary key when it appears in `customers`, but a foreign key when it appears in `orders`.

---

# *Cross Join*

- Notice that cross joins don’t require an `ON` statement.
- Sometimes, we just want to combine all rows of one table with all rows of another table.
- For instance, if we had a table of `shirts` and a table of `pants`, we might want to know all the possible combinations to create different outfits.

```sql
SELECT shirts.shirt_color,
   pants.pants_color
FROM shirts
CROSS JOIN pants;
```

---

# *Union*

- Sometimes we just want to stack one dataset on top of the other. Well, the `[UNION](https://www.codecademy.com/resources/docs/sql/commands/union?page_ref=catalog)` operator allows us to do that.
- SQL has strict rules for appending data:
    - Tables must have the same number of columns.
    - The columns must have the same data types in the same order as the first table.

```sql
SELECT *
FROM table1
UNION
SELECT *
FROM table2;
```

![Untitled](https://s3-us-west-2.amazonaws.com/secure.notion-static.com/d6a89e31-d7a1-4acf-ab19-2052348be128/Untitled.png)

- The result would be:

![Untitled](https://s3-us-west-2.amazonaws.com/secure.notion-static.com/8b60e4f6-f0e9-4a5b-8a29-4a8c5faec05f/Untitled.png)

---

# *With*

- Do *not* include `;` inside of the `()` of your `WITH` statement.

```sql
WITH previous_results AS (
   SELECT ...
   ...
   ...
   ...
)
SELECT *
FROM previous_results
JOIN customers
  ON _____ = _____;
```

- Let’s break the code down:
    - The `[WITH](https://www.codecademy.com/resources/docs/sql/commands/with?page_ref=catalog)` statement allows us to perform a separate query (such as aggregating customer’s subscriptions)
    - `previous_results` is the alias that we will use to reference any columns from the query inside of the `WITH` clause
    - We can then go on to do whatever we want with this temporary table (such as join the temporary table with another table)
- Essentially, we are putting a whole first query inside the parentheses `()` and giving it a name. After that, we can use this name as if it’s a table and write a new query *using* the first query.
- For instance, they might want to know how many magazines each customer subscribes to.
- This query is good, but a `customer_id` isn’t terribly useful for our marketing department, they probably want to know the customer’s name.
- We want to be able to join the results of this query with our `customers` table, which will tell us the name of each customer.
